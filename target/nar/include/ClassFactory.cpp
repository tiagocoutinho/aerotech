static const char *RcsId = "$Id: ClassFactory.cpp,v 1.1 2012/02/23 17:46:18 olivierroux Exp $";
//+=============================================================================
//
// file :        ClassFactory.cpp
//
// description : C++ source for the class_factory method of the DServer
//               device class. This method is responsible for the creation of
//               all class singleton for a device server. It is called
//               at device server startup
//
// project :     TANGO Device Server
//
// $Author: olivierroux $
//
// $Revision: 1.1 $
// $Date: 2012/02/23 17:46:18 $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source: /cvsroot/tango-ds/Motion/Aerotech/src/ClassFactory.cpp,v $
// $Log: ClassFactory.cpp,v $
// Revision 1.1  2012/02/23 17:46:18  olivierroux
// - initial import #21894
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>
#include <AerotechBoxClass.h>
#include <AerotechAxisClass.h>
#include <EnsembleExpertClass.h>
#include <A3200ExpertClass.h>

/**
 *	Create EnsembleBoxClass singleton and store it in DServer object.
 */

void Tango::DServer::class_factory()
{

	add_class(AerotechBox_ns::AerotechBoxClass::init("AerotechBox"));
	add_class(AerotechAxis_ns::AerotechAxisClass::init("AerotechAxis"));
	add_class(EnsembleExpert_ns::EnsembleExpertClass::init("EnsembleExpert"));
	add_class(A3200Expert_ns::A3200ExpertClass::init("A3200Expert"));

}
