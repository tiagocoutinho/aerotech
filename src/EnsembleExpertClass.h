//=============================================================================
//
// file :         EnsembleExpertClass.h
//
// description :  Include for the EnsembleExpertClass root class.
//                This class is the singleton class for
//                the EnsembleExpert device class.
//                It contains all properties and methods which the 
//                EnsembleExpert requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _ENSEMBLEEXPERTCLASS_H
#define _ENSEMBLEEXPERTCLASS_H

#include <tango.h>
#include <EnsembleExpert.h>


namespace EnsembleExpert_ns
{//=====================================
//	Define classes for attributes
//=====================================
class errorRawAttrib: public Tango::Attr
{
public:
	errorRawAttrib():Attr("errorRaw", Tango::DEV_LONG, Tango::READ) {};
	~errorRawAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_errorRaw(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_errorRaw_allowed(ty);}
};

class statusRawAttrib: public Tango::Attr
{
public:
	statusRawAttrib():Attr("statusRaw", Tango::DEV_LONG, Tango::READ) {};
	~statusRawAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_statusRaw(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_statusRaw_allowed(ty);}
};

class homeOffsetAttrib: public Tango::Attr
{
public:
	homeOffsetAttrib():Attr("homeOffset", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~homeOffsetAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_homeOffset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<EnsembleExpert *>(dev))->write_homeOffset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_homeOffset_allowed(ty);}
};

class homeVelocityAttrib: public Tango::Attr
{
public:
	homeVelocityAttrib():Attr("homeVelocity", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~homeVelocityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_homeVelocity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<EnsembleExpert *>(dev))->write_homeVelocity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_homeVelocity_allowed(ty);}
};

class rampRateAttrib: public Tango::Attr
{
public:
	rampRateAttrib():Attr("rampRate", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~rampRateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_rampRate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<EnsembleExpert *>(dev))->write_rampRate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_rampRate_allowed(ty);}
};

class highLimitAttrib: public Tango::Attr
{
public:
	highLimitAttrib():Attr("highLimit", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~highLimitAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_highLimit(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<EnsembleExpert *>(dev))->write_highLimit(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_highLimit_allowed(ty);}
};

class lowLimitAttrib: public Tango::Attr
{
public:
	lowLimitAttrib():Attr("lowLimit", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~lowLimitAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_lowLimit(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<EnsembleExpert *>(dev))->write_lowLimit(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_lowLimit_allowed(ty);}
};

class currentVelocityAttrib: public Tango::Attr
{
public:
	currentVelocityAttrib():Attr("currentVelocity", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~currentVelocityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_currentVelocity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<EnsembleExpert *>(dev))->write_currentVelocity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_currentVelocity_allowed(ty);}
};

class positionErrorAttrib: public Tango::Attr
{
public:
	positionErrorAttrib():Attr("positionError", Tango::DEV_DOUBLE, Tango::READ) {};
	~positionErrorAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleExpert *>(dev))->read_positionError(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleExpert *>(dev))->is_positionError_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<EnsembleExpert *>(dev))->is_Reset_allowed(any);}
};



//
// The EnsembleExpertClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	EnsembleExpertClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static EnsembleExpertClass *init(const char *);
	static EnsembleExpertClass *instance();
	~EnsembleExpertClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	EnsembleExpertClass(string &);
	static EnsembleExpertClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace EnsembleExpert_ns

#endif // _ENSEMBLEEXPERTCLASS_H
