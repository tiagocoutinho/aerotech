static const char *ClassId    = "$Id: EnsembleExpertClass.cpp,v 1.1 2012/02/23 17:46:18 olivierroux Exp $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source: /cvsroot/tango-ds/Motion/Aerotech/src/EnsembleExpertClass.cpp,v $";
static const char *SvnPath    = "$HeadURL: $";
static const char *HttpServer = "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        EnsembleExpertClass.cpp
//
// description : C++ source for the EnsembleExpertClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the EnsembleExpert once per process.
//
// project :     TANGO Device Server
//
// $Author: olivierroux $
//
// $Revision: 1.1 $
//
// $Log: EnsembleExpertClass.cpp,v $
// Revision 1.1  2012/02/23 17:46:18  olivierroux
// - initial import #21894
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <EnsembleExpert.h>
#include <EnsembleExpertClass.h>


//+----------------------------------------------------------------------------
/**
 *	Create EnsembleExpertClass singleton and return it in a C function for Python usage
 */
//+----------------------------------------------------------------------------
extern "C" {
#ifdef WIN32

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_EnsembleExpert_class(const char *name) {
		return EnsembleExpert_ns::EnsembleExpertClass::init(name);
	}
}


namespace EnsembleExpert_ns
{



//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
EnsembleExpertClass *EnsembleExpertClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::EnsembleExpertClass(string &s)
// 
// description : 	constructor for the EnsembleExpertClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
EnsembleExpertClass::EnsembleExpertClass(string &s):DeviceClass(s)
{

	cout2 << "Entering EnsembleExpertClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();
	
	cout2 << "Leaving EnsembleExpertClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::~EnsembleExpertClass()
// 
// description : 	destructor for the EnsembleExpertClass
//
//-----------------------------------------------------------------------------
EnsembleExpertClass::~EnsembleExpertClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
EnsembleExpertClass *EnsembleExpertClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new EnsembleExpertClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

EnsembleExpertClass *EnsembleExpertClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void EnsembleExpertClass::command_factory()
{

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum EnsembleExpertClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum EnsembleExpertClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum EnsembleExpertClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void EnsembleExpertClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new EnsembleExpert(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//	Method: EnsembleExpertClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void EnsembleExpertClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : positionError
	positionErrorAttrib	*position_error = new positionErrorAttrib();
	Tango::UserDefaultAttrProp	position_error_prop;
	position_error_prop.set_description("position error");
	position_error->set_default_properties(position_error_prop);
	att_list.push_back(position_error);

	//	Attribute : velocityFeedback
	velocityFeedbackAttrib	*velocity_feedback = new velocityFeedbackAttrib();
	Tango::UserDefaultAttrProp	velocity_feedback_prop;
	velocity_feedback_prop.set_label("velocity Feedback");
	velocity_feedback_prop.set_unit(" ");
	velocity_feedback_prop.set_description("velocity Feedback(VFBK)");
	velocity_feedback->set_default_properties(velocity_feedback_prop);
	att_list.push_back(velocity_feedback);

	//	Attribute : velocityCommand
	velocityCommandAttrib	*velocity_command = new velocityCommandAttrib();
	Tango::UserDefaultAttrProp	velocity_command_prop;
	velocity_command_prop.set_label("velocity Command");
	velocity_command_prop.set_unit(" ");
	velocity_command_prop.set_description("velocity Command (VCMD)");
	velocity_command->set_default_properties(velocity_command_prop);
	att_list.push_back(velocity_command);

	//	Attribute : lowLimit
	lowLimitAttrib	*low_limit = new lowLimitAttrib();
	Tango::UserDefaultAttrProp	low_limit_prop;
	low_limit_prop.set_description("get/sets software low limits in the controller");
	low_limit->set_default_properties(low_limit_prop);
	low_limit->set_memorized();
	low_limit->set_memorized_init(true);
	att_list.push_back(low_limit);

	//	Attribute : highLimit
	highLimitAttrib	*high_limit = new highLimitAttrib();
	Tango::UserDefaultAttrProp	high_limit_prop;
	high_limit_prop.set_description("get/sets software high limits in the controller");
	high_limit->set_default_properties(high_limit_prop);
	high_limit->set_memorized();
	high_limit->set_memorized_init(true);
	att_list.push_back(high_limit);

	//	Attribute : rampRate
	rampRateAttrib	*ramp_rate = new rampRateAttrib();
	Tango::UserDefaultAttrProp	ramp_rate_prop;
	ramp_rate_prop.set_description("get/sets ramp rate for the axis");
	ramp_rate->set_default_properties(ramp_rate_prop);
	ramp_rate->set_memorized();
	ramp_rate->set_memorized_init(true);
	att_list.push_back(ramp_rate);

	//	Attribute : homeVelocity
	homeVelocityAttrib	*home_velocity = new homeVelocityAttrib();
	Tango::UserDefaultAttrProp	home_velocity_prop;
	home_velocity_prop.set_description("get/sets homing velocity in the controller");
	home_velocity->set_default_properties(home_velocity_prop);
	home_velocity->set_memorized();
	home_velocity->set_memorized_init(true);
	att_list.push_back(home_velocity);

	//	Attribute : homeOffset
	homeOffsetAttrib	*home_offset = new homeOffsetAttrib();
	Tango::UserDefaultAttrProp	home_offset_prop;
	home_offset_prop.set_description("get/sets homing offset in the controller");
	home_offset->set_default_properties(home_offset_prop);
	home_offset->set_memorized();
	home_offset->set_memorized_init(true);
	att_list.push_back(home_offset);

	//	Attribute : statusRaw
	statusRawAttrib	*status_raw = new statusRawAttrib();
	Tango::UserDefaultAttrProp	status_raw_prop;
	status_raw_prop.set_label("raw status value");
	status_raw->set_default_properties(status_raw_prop);
	att_list.push_back(status_raw);

	//	Attribute : errorRaw
	errorRawAttrib	*error_raw = new errorRawAttrib();
	Tango::UserDefaultAttrProp	error_raw_prop;
	error_raw_prop.set_label("raw error value");
	error_raw->set_default_properties(error_raw_prop);
	att_list.push_back(error_raw);

	//	Attribute : calibrationActive
	calibrationActiveAttrib	*calibration_active = new calibrationActiveAttrib();
	Tango::UserDefaultAttrProp	calibration_active_prop;
	calibration_active_prop.set_description("calibrationActive: flag saying if calibration is active: ie: correction table is currently being applied");
	calibration_active->set_default_properties(calibration_active_prop);
	att_list.push_back(calibration_active);

	//	End of Automatic code generation
	//-------------------------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void EnsembleExpertClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	EnsembleExpertClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void EnsembleExpertClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "AxisId";
	prop_desc = "Axis name as configured in the controller";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "ControllerType";
	prop_desc = "controller type\nvalid values : ENSEMBLE, A3200\nmust be defined\nNo default value";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		EnsembleExpertClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void EnsembleExpertClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Aerotech");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("handles Aerotech Ensemble drivers expert functions");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs or svn location
	string	filename(classname);
	filename += "Class.cpp";
	
	// Create a string with the class ID to
	// get the string into the binary
	string	class_id(ClassId);
	
	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}
	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_4Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
