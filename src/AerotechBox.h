//=============================================================================
//
// file :        AerotechBox.h
//
// description : Include for the AerotechBox class.
//
// project :	Ensemble
//
// $Author: jean_coquet $
//
// $Revision: 1.3 $
// $Date: 2012/03/05 08:43:07 $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source: /cvsroot/tango-ds/Motion/Aerotech/src/AerotechBox.h,v $
// $Log: AerotechBox.h,v $
// Revision 1.3  2012/03/05 08:43:07  jean_coquet
// bug correction on relativeMove attribute
// added AerotechBox::SaveInFlash
// regenerated POGO Documentation for the 3 tango classes
//
// Revision 1.2  2012/03/02 15:45:15  jean_coquet
// mise au point avec le materiel
//
// Revision 1.1  2012/02/23 17:46:18  olivierroux
// - initial import #21894
//
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _AEROTECHBOX_H
#define _AEROTECHBOX_H

#include <tango.h>
#include "lib/AbstractAerotech.h"
//using namespace Tango;

/**
 * @author	$Author: jean_coquet $
 * @version	$Revision: 1.3 $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------


namespace AerotechBox_ns
{

/**
 * Class Description:
 * controls communication with Aerotech Ensemble through Ethernet
 */

/*
 *	Device States Description:
 */


class AerotechBox: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevLong	*attr_oKCommandCounter_read;
		Tango::DevLong	*attr_badCommandCounter_read;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	IP Address
 */
	string	iPAddress;
/**
 *	TCP/IP port for communication
 *	
 */
	Tango::DevLong	port;
/**
 *	valeur de timeout en secondes
 */
	Tango::DevLong	tCPTimeOut;
/**
 *	Type of the Controller
 *	supported types are [A3200|ENSEMBLE]
 *	Must be defined : No default Value
 *	
 */
	string	controllerType;
/**
 *	main axis name
 *	must be defined
 */
	string	mainAxisName;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AerotechBox(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	AerotechBox(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	AerotechBox(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~AerotechBox() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name AerotechBox methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for oKCommandCounter acquisition result.
 */
	virtual void read_oKCommandCounter(Tango::Attribute &attr);
/**
 *	Extract real attribute values for badCommandCounter acquisition result.
 */
	virtual void read_badCommandCounter(Tango::Attribute &attr);
/**
 *	Read/Write allowed for oKCommandCounter attribute.
 */
	virtual bool is_oKCommandCounter_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for badCommandCounter attribute.
 */
	virtual bool is_badCommandCounter_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Reset command.
 */
	virtual bool is_Reset_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ExecLowLevelCmd command.
 */
	virtual bool is_ExecLowLevelCmd_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SaveInFlash command.
 */
	virtual bool is_SaveInFlash_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for RunProgram command.
 */
	virtual bool is_RunProgram_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for StopProgram command.
 */
	virtual bool is_StopProgram_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return	Status description
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString	dev_status();
/**
 * Reset the controller
 *	@exception DevFailed
 */
	void	reset();
/**
 * executes a Aerotech cmd and returns the response
 *	** WARNING : EXPERT USERS ONLY! YOU CAN CRASH THE CONTROLLER! **
 *	@param	argin	
 *	@return	
 *	@exception DevFailed
 */
	Tango::DevString	exec_low_level_cmd(Tango::DevString);
/**
 * writes in non volatile memory the parameters for all controllers
 *	@exception DevFailed
 */
	void	save_in_flash();
/**
 * runs the program specified in the task specified
 *	EXPERT COMMAND - can crash the controller!
 *	@param	argin	[program name][task number]
 *	@exception DevFailed
 */
	void	run_program(const Tango::DevVarLongStringArray *);
/**
 * stops the program in the task
 *	EXPERT COMMAND - can crash the controller!
 *	@param	argin	the task number
 *	@exception DevFailed
 */
	void	stop_program(Tango::DevLong);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------

	//- init utilities
	bool m_init_device_done;
	bool m_properties_missing;


	//- the device status string
	std::string m_status_str;

	//- check wether or not the device is properly init
	void check_init () 
    throw (Tango::DevFailed);

	Aerotech_ns::AbstractAerotech * controller;
};

}	// namespace_ns

#endif	// _AEROTECHBOX_H
