#include "cA3200.h"
#include "cEnsemble.h"
#include "SocketPool.h"

#include <iostream>

/*********************************************************
/*                                                       *
/*  Demonstration software showing the use of            *
/*  "AbstractAerotech","cA3200" and "cEnsemble" classes  *                                          *
/*                                                       *
/*   To change the axis target type                      *
/*   Un-comment one of the two lines    21 or 22         *
/*   The first line for "A3200" driver                   *
/*   The second one for "Ensemble" driver                *
/*                                                       *
/*    Jean-Pierre Gaillet 03/07/2012                     *
/*********************************************************/
using namespace Aerotech_ns;


  AbstractAerotech * AXIS;
//- #define  AXIS aerotech::cA3200::instance()
//#define  AXIS aerotech::cEnsemble::instance()

void show_menu (char axis_name[4])
  {
  system("cls");  
  std::cout << " *** Test Drivers Aerotech with \"YAT\" library  ***\n";
  std::cout << "\n";
  std::cout << "Use keys (and Enter key) :\n";
  std::cout << "\n";
  std::cout << "    A: Change Acceleration             B: Soft Limits \n";
  std::cout << "    C: Clear screen                    D: Disable\n";
  std::cout << "    E: Enable                          F: Read Fault status " << axis_name<< std::endl;
  std::cout << "    G: Error limit                     H: Go to Home position\n";
  std::cout << "    L: Low level command               M: Move to absolute position\n";
  std::cout << "    N: Axis name                       P: Read Position " << axis_name<< std::endl;    
  std::cout << "    Q: Quit program                    R: Relative displacement\n";  
  std::cout << "    S: Read status " << axis_name <<  "                   T: Encoder-> Pulse\n" ;
  std::cout << "    V: Change Velocity                 \n";
  }



int main (int argc, char* argv[])
{
  double data_read;
  char name_axis[5]="X";
  char c =' ';  // Hitted key
  double position =0.000;
  bool moving = false;
  std::string s;
  double speed;
  double acceleration;
  int status;
  char reponse[512]="   ";
  char input_string[512]="    ";
  char IP_adress[128]="192.168.1.12";
  // First select the IP Address
  std::cout << " Validate IP address or change it from "<<IP_adress<<"  to : ";
  gets(input_string);
  if (input_string[0]!= 0)
      strcpy(IP_adress,input_string);
  system("cls"); 
  try
  {
    SocketPool::Config conf;
    conf.ip_address = IP_adress;
    conf.port = 8000;
    conf.in_tmout = 2000;
    conf.o_tmout = 2000;
    conf.start_tmout = 5000;

    //- create the SocketPool singleton
    SOCK_POOL->initialize ();
    //- configure the SocketPool singleton
    SOCK_POOL->configure (conf);
    std::cout << "Created Socket singleton" << std::endl;
  }
  catch (yat::Exception &ye)
  {
    std::cout << "exception caught trying to connect to Driver server <" << ye.errors[0].desc << std::endl;;
    //- wait hiting a key to show the message
    std::string tmp;
    std::cin >> tmp;
    SOCK_POOL->release ();
    return -1;
  }
  //- instanciate the class
  try
  {
    AXIS = new cA3200 (name_axis);
  }
  catch (...)
  {
    std::cout << "exception caught trying instanciate Axis class " << std::endl;;
    //- wait hiting a key to show the message
    std::string tmp;
    std::cin >> tmp;
    SOCK_POOL->release ();
    return -1;
  }
  
  AXIS->axis_enable ();
  Sleep (20);
  if (AXIS->axis_is_enabled())
     std::cout << " Axis Enabled "<< std::endl;
  else
     std::cout << " Axis Disabled "<< std::endl;
  Sleep (1000);
  show_menu(name_axis);
  while (c!='Q')
     {
     c=std::cin.get();
     switch(c)
        { 
        case 'N' :
           printf(" Type the new axis name ( max 3 char) ");
           printf(" then type \"Enter\" key\n");
           scanf_s("%s",name_axis,4);
           name_axis[4]=0;
           show_menu(name_axis);
           break;
        case 'L' :
           //::memset (input_string, 0, 512);
           std::cout << " Type a command : "; 
           gets(input_string); // to clear buffer
           gets(input_string);
           AXIS->lowlevelcmd (input_string, reponse);
           std::cout << std::endl << reponse << std::endl;
           break;
        case 'P' :
           if (AXIS->get_axis_position(position))
					    std::cout << " Position "<< name_axis <<" : " << position << std::endl;
			 	   else
			        printf(" Position not readable\n");
		       break;
        case 'M' :
           std::cout << " Position to reach : ";
           scanf_s("%lf",&position);
		      // all the main methods of the class return true if executed without error
		      if (AXIS->axis_move_abs(position))
			       {
             moving=true;
             while(moving)
                {
                if (AXIS->get_axis_position(position))
                   {
                   std::cout << " Position "<< name_axis <<" : " << position << "    \r";
	                 moving=AXIS->axis_is_moving();
                   }
                }
			       std::cout << std::endl;
			       std::cout << " End of displacement" << std::endl;
			       }
		      else
			       std::cout << " Moving axis not possible" << std::endl;
          break;
       case 'R' :
          std::cout << " Displacement value : ";
          scanf_s("%lf",&position);
		      // all the main methods of the class return true if executed without error
		      if (AXIS->axis_move_rel(position))
			       {
             moving=true;
             while(moving)
                {
                if (AXIS->get_axis_position(position))
                   {
                   std::cout << " Position "<< name_axis <<" : " << position << "    \r";
	                 moving=AXIS->axis_is_moving();
                   }
                }
			       std::cout << std::endl;
			       std::cout << " End of displacement" << std::endl;
			       }
		      else
			       std::cout << " Moving axis not possible" << std::endl;
          break;
       case 'C' :
          show_menu(name_axis);
          break;
       case 'E' :    
          if (AXIS->axis_enable ())
			       std::cout << " Enable" << std::endl;
		      else
			      std::cout << " Enable axis not possible"<< std::endl;
          break;
       case 'D' :
          if(AXIS->axis_disable ())
			       std::cout << " Disable" << std::endl;
		      else
			       std::cout << " Disable axis not possible" << std::endl;
          break;
       case 'X' :  
          if (AXIS->axis_is_enabled())
             std::cout << " Axis Enabled "<< std::endl;
          else
             std::cout << " Axis Disabled "<< std::endl;
          break;
       case 'V' :
		      if (AXIS->get_axis_default_speed(speed))
			       {
			       std::cout << " Change velocity from "<< speed <<"  to : ";
			       scanf_s("%lf",&speed);
			       if (AXIS->set_axis_default_speed (speed))
				        std::cout << " Velocity axis changed to " << speed << std::endl;
			       else
				        std::cout << " Read velocity not possible" << std::endl;
			       }
		      else
			       std::cout <<" Current velocity not set"<< std::endl;
		      break;
       case 'A' :
		      if (AXIS->get_axis_ramp_rate(acceleration))
			       {
			       std::cout << " Change acceleration from "<< acceleration <<"  to : ";
			       scanf_s("%lf",&acceleration);
			       if (AXIS->set_axis_ramp_rate(acceleration))
				        std::cout << " Acceleration axis changed to "<< acceleration << std::endl;
			       else
				        std::cout << " Changing acceleration not possible" << std::endl;
			       }
		      else
			       std::cout << " Current acceleration not readable" << std::endl;
		      break;
       case 'H' :    
          if (AXIS->axis_home())
			       std::cout << " Go to Home" << std::endl;
		      else
			       std::cout << " \"Homing\" not possible" << std::endl;
			    break;
       case 'F' :
		      if (AXIS->get_axis_fault_status(status))
		      // the fault status is an integer. It is set 0 if no error occurs
		      // To convert his status in a list of string, use "error_to_string" method
             {
             if (status!=0)
			          {
			          AXIS->error_to_string(status,reponse);
			          std::cout <<  "  "  << reponse << std::endl;
                //Acknowledge and clear the fault on axis
                AXIS->axis_fault_ack(); 
 			          }
             else
                std::cout <<  "  No Error"<< std::endl;
             }
		       else
			       std::cout <<  " Fault status not readable" << std::endl;
		       break;
       case 'B' :
          if (AXIS->get_axis_software_limit_low(data_read)) 
             {
             std::cout << " Change Low limit from "<< data_read <<"  to : ";
			       scanf_s("%lf",&data_read);
			       if (AXIS->set_axis_software_limit_low(data_read))
				        std::cout << " Low limit changed to " << data_read << std::endl;
			       }  
          if (AXIS->get_axis_software_limit_high(data_read)) 
             {
             std::cout << " Change High limit from "<< data_read <<"  to : ";
			       scanf_s("%lf",&data_read);
			       if (AXIS->set_axis_software_limit_high(data_read))
				        std::cout << " High limit changed to " << data_read << std::endl;
			       }  
          break;  
       case 'G' :
          if (AXIS->get_axis_error_limit(data_read)) 
             {
             std::cout << " Change Error limit from "<< data_read <<"  to : ";
			       scanf_s("%lf",&data_read);
			       if (AXIS->set_axis_error_limit(data_read))
				        std::cout << " Error limit changed to " << data_read << std::endl;
			       }  
          break;
       case 'T' :
          if ( AXIS->countsperunit(1,data_read))
             std::cout << " Encoder for 1 unit: " << data_read << std::endl ; 
 		      break;
       case 'S' :
           // the status is an integer with several boolean flags decodable with "is_something" methods
		      if (AXIS->get_axis_status(status))
			       {
			       std::cout << " Status "<< name_axis <<" : " << status << std::endl;
    		     if (AXIS->axis_is_enabled())
                std::cout << " Enabled" << std::endl;
			       else 
                std::cout << " Disabled" << std::endl;
			       if (AXIS->axis_is_accel_or_decel()) {std::cout << " Accelerating"<< std::endl;};
			       if (AXIS->axis_is_moving()) {std::cout << " Moving"<< std::endl;};
			       if (AXIS->axis_is_homing()) {std::cout << " Homing"<< std::endl;};
			       if (AXIS->axis_is_homed()) {std::cout << " Homed"<< std::endl;};
			       if (AXIS->axis_is_in_position()) {std::cout << " Axis in position"<< std::endl;};
			       if (AXIS->axis_is_ccw_EOT()) {std::cout << " CCW End of run"<< std::endl;};
			       if (AXIS->axis_is_cw_EOT()) {std::cout << " CW End of run"<< std::endl;};
			       if (AXIS->axis_is_brake_off()) {std::cout << " Brake off"<< std::endl;};
			       if (AXIS->axis_is_brake_on()) {std::cout << " Brake on"<< std::endl;};
			       if (AXIS->axis_is_emergency_stop()) {std::cout << " Emergency stop"<< std::endl;};
    
          }
		      else
			       {
			       std::cout << " Status not readable" << std::endl;
			       }         
		      break;
        }
     }

  SOCK_POOL->release ();
  return 0;
}




