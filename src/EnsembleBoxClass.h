//=============================================================================
//
// file :         EnsembleBoxClass.h
//
// description :  Include for the EnsembleBoxClass root class.
//                This class is the singleton class for
//                the EnsembleBox device class.
//                It contains all properties and methods which the 
//                EnsembleBox requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: jean_coquet $
//
// $Revision: 1.2 $
// $Date: 2012-03-02 15:45:15 $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source: /users/chaize/newsvn/cvsroot/Motion/Aerotech/src/EnsembleBoxClass.h,v $
// $Log: not supported by cvs2svn $
// Revision 1.1  2012/02/23 17:46:18  olivierroux
// - initial import #21894
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _ENSEMBLEBOXCLASS_H
#define _ENSEMBLEBOXCLASS_H

#include <tango.h>
#include <EnsembleBox.h>


namespace EnsembleBox_ns
{//=====================================
//	Define classes for attributes
//=====================================
class badCommandCounterAttrib: public Tango::Attr
{
public:
	badCommandCounterAttrib():Attr("badCommandCounter", Tango::DEV_LONG, Tango::READ) {};
	~badCommandCounterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleBox *>(dev))->read_badCommandCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleBox *>(dev))->is_badCommandCounter_allowed(ty);}
};

class oKCommandCounterAttrib: public Tango::Attr
{
public:
	oKCommandCounterAttrib():Attr("oKCommandCounter", Tango::DEV_LONG, Tango::READ) {};
	~oKCommandCounterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<EnsembleBox *>(dev))->read_oKCommandCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<EnsembleBox *>(dev))->is_oKCommandCounter_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class ExecLowLevelCmdClass : public Tango::Command
{
public:
	ExecLowLevelCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ExecLowLevelCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ExecLowLevelCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<EnsembleBox *>(dev))->is_ExecLowLevelCmd_allowed(any);}
};



class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<EnsembleBox *>(dev))->is_Reset_allowed(any);}
};



//
// The EnsembleBoxClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	EnsembleBoxClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static EnsembleBoxClass *init(const char *);
	static EnsembleBoxClass *instance();
	~EnsembleBoxClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	EnsembleBoxClass(string &);
	static EnsembleBoxClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace EnsembleBox_ns

#endif // _ENSEMBLEBOXCLASS_H
