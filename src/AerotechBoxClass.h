//=============================================================================
//
// file :         AerotechBoxClass.h
//
// description :  Include for the AerotechBoxClass root class.
//                This class is the singleton class for
//                the AerotechBox device class.
//                It contains all properties and methods which the 
//                AerotechBox requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: jean_coquet $
//
// $Revision: 1.3 $
// $Date: 2012/03/05 08:43:07 $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source: /cvsroot/tango-ds/Motion/Aerotech/src/AerotechBoxClass.h,v $
// $Log: AerotechBoxClass.h,v $
// Revision 1.3  2012/03/05 08:43:07  jean_coquet
// bug correction on relativeMove attribute
// added AerotechBox::SaveInFlash
// regenerated POGO Documentation for the 3 tango classes
//
// Revision 1.2  2012/03/02 15:45:15  jean_coquet
// mise au point avec le materiel
//
// Revision 1.1  2012/02/23 17:46:18  olivierroux
// - initial import #21894
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _AEROTECHBOXCLASS_H
#define _AEROTECHBOXCLASS_H

#include <tango.h>
#include <AerotechBox.h>


namespace AerotechBox_ns
{//=====================================
//	Define classes for attributes
//=====================================
class badCommandCounterAttrib: public Tango::Attr
{
public:
	badCommandCounterAttrib():Attr("badCommandCounter", Tango::DEV_LONG, Tango::READ) {};
	~badCommandCounterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AerotechBox *>(dev))->read_badCommandCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AerotechBox *>(dev))->is_badCommandCounter_allowed(ty);}
};

class oKCommandCounterAttrib: public Tango::Attr
{
public:
	oKCommandCounterAttrib():Attr("oKCommandCounter", Tango::DEV_LONG, Tango::READ) {};
	~oKCommandCounterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AerotechBox *>(dev))->read_oKCommandCounter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AerotechBox *>(dev))->is_oKCommandCounter_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class StopProgramClass : public Tango::Command
{
public:
	StopProgramClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopProgramClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopProgramClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AerotechBox *>(dev))->is_StopProgram_allowed(any);}
};



class RunProgramClass : public Tango::Command
{
public:
	RunProgramClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RunProgramClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RunProgramClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AerotechBox *>(dev))->is_RunProgram_allowed(any);}
};



class SaveInFlashClass : public Tango::Command
{
public:
	SaveInFlashClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveInFlashClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveInFlashClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AerotechBox *>(dev))->is_SaveInFlash_allowed(any);}
};



class ExecLowLevelCmdClass : public Tango::Command
{
public:
	ExecLowLevelCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ExecLowLevelCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ExecLowLevelCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AerotechBox *>(dev))->is_ExecLowLevelCmd_allowed(any);}
};



class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AerotechBox *>(dev))->is_Reset_allowed(any);}
};



//
// The AerotechBoxClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	AerotechBoxClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static AerotechBoxClass *init(const char *);
	static AerotechBoxClass *instance();
	~AerotechBoxClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	AerotechBoxClass(string &);
	static AerotechBoxClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace AerotechBox_ns

#endif // _AEROTECHBOXCLASS_H
